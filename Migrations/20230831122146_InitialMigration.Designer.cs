// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BashScriptRunner.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230831122146_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BashScriptRunner.HostedServices.JobService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PipelineId")
                        .HasColumnType("integer");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("StateId");

                    b.ToTable("JobService");
                });

            modelBuilder.Entity("HostingEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiEndpoint")
                        .HasColumnType("text");

                    b.Property<string>("SshEndpoint")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HostingEnvironments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiEndpoint = "https://api.example.com/",
                            SshEndpoint = "ssh.example.com"
                        },
                        new
                        {
                            Id = 2,
                            ApiEndpoint = "https://api.example.com/",
                            SshEndpoint = "ssh.example.com"
                        },
                        new
                        {
                            Id = 3,
                            ApiEndpoint = "https://api.example.com/",
                            SshEndpoint = "ssh.example.com"
                        },
                        new
                        {
                            Id = 4,
                            ApiEndpoint = "https://api.example.com/",
                            SshEndpoint = "ssh.example.com"
                        });
                });

            modelBuilder.Entity("JobDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PipelineDescriptorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PipelineDescriptorId");

                    b.ToTable("JobDescriptors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Command = "echo \"Hello World 1 \" && sleep 1 && echo \"Hello World 2 $JobParameter\" && sleep 1 && echo \"Hello World 3 $JobParameter\" && sleep 1 && echo \"Hello World 4 $JobParameter2\" && sleep 1 && echo \"Hello World 5\"",
                            Name = "Sample Job 1",
                            PipelineDescriptorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Command = "echo \"Hello World 1 \" && sleep 1 && echo \"Hello World 2 $JobParameter\" && sleep 1 && echo \"Hello World 3 $JobParameter\" && sleep 1 && echo \"Hello World 4 $JobParameter2\" && sleep 1 && echo \"Hello World 5\"",
                            Name = "Sample Job 2",
                            PipelineDescriptorId = 2
                        });
                });

            modelBuilder.Entity("JobParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobDescriptorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobDescriptorId");

                    b.ToTable("JobParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobDescriptorId = 1,
                            Name = "JobParameter",
                            Value = "JobParameterValue"
                        },
                        new
                        {
                            Id = 2,
                            JobDescriptorId = 1,
                            Name = "JobParameter2",
                            Value = "JobParameterValue2"
                        },
                        new
                        {
                            Id = 3,
                            JobDescriptorId = 2,
                            Name = "JobParameter",
                            Value = "JobParameterValue"
                        },
                        new
                        {
                            Id = 4,
                            JobDescriptorId = 2,
                            Name = "JobParameter2",
                            Value = "JobParameterValue2"
                        });
                });

            modelBuilder.Entity("JobState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Messages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("PipelineStateId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PipelineStateId");

                    b.ToTable("JobStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 8, 31, 12, 21, 46, 754, DateTimeKind.Utc).AddTicks(780),
                            Messages = new List<string> { "Message 1", "Message 2" },
                            PipelineStateId = 1,
                            State = 3
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 8, 31, 12, 21, 46, 754, DateTimeKind.Utc).AddTicks(790),
                            Messages = new List<string> { "Message 1", "Message 2" },
                            PipelineStateId = 1,
                            State = 2
                        });
                });

            modelBuilder.Entity("Pipeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("PipelineDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PipelineDescriptors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sample Pipeline 1",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sample Pipeline 2",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("PipelineState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PipelineDescriptorId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PipelineDescriptorId");

                    b.ToTable("PipelineStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 8, 31, 12, 21, 46, 754, DateTimeKind.Utc).AddTicks(770),
                            PipelineDescriptorId = 1,
                            State = 3
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 8, 31, 12, 21, 46, 754, DateTimeKind.Utc).AddTicks(780),
                            PipelineDescriptorId = 2,
                            State = 2
                        });
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("StagingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sample Project 1",
                            ProductionId = 1,
                            StagingId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sample Project 2",
                            ProductionId = 3,
                            StagingId = 4
                        });
                });

            modelBuilder.Entity("BashScriptRunner.HostedServices.JobService", b =>
                {
                    b.HasOne("Pipeline", null)
                        .WithMany("Jobs")
                        .HasForeignKey("PipelineId");

                    b.HasOne("PipelineState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("JobDescriptor", b =>
                {
                    b.HasOne("PipelineDescriptor", null)
                        .WithMany("Jobs")
                        .HasForeignKey("PipelineDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobParameter", b =>
                {
                    b.HasOne("JobDescriptor", null)
                        .WithMany("Parameters")
                        .HasForeignKey("JobDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobState", b =>
                {
                    b.HasOne("PipelineState", null)
                        .WithMany("JobStates")
                        .HasForeignKey("PipelineStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pipeline", b =>
                {
                    b.HasOne("PipelineState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("PipelineDescriptor", b =>
                {
                    b.HasOne("Project", null)
                        .WithMany("Pipelines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PipelineState", b =>
                {
                    b.HasOne("PipelineDescriptor", null)
                        .WithMany("Runs")
                        .HasForeignKey("PipelineDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobDescriptor", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Pipeline", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("PipelineDescriptor", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Runs");
                });

            modelBuilder.Entity("PipelineState", b =>
                {
                    b.Navigation("JobStates");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Navigation("Pipelines");
                });
#pragma warning restore 612, 618
        }
    }
}
